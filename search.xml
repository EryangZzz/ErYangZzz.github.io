<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[databese基础]]></title>
    <url>%2F2018%2F11%2F20%2Fdatabase-01%2F</url>
    <content type="text"><![CDATA[数据库 - 数据的仓库关系型数据库 - 数据持久化 - 管理数据 - 方便的检索数据a.理论基础：集合论、关系代数b.表象：用二维表存储数据 行 - row - 记录 列 - column - 字段 - 数据类型 主键列 - primary key - 唯一标识的一条记录 c.有自己的编程语言 - 结构化查询语言 SQLDB - 数据库DBMS - 数据库管理系统DBA - database administratorDBS - database system = DB + DBMS + DBA 硬件 软件 人件 关系型数据库产品： 1.Oracle 2.MySQL - 服务器+客户端工具 - C/S应用模式 - Client/Server 浏览器一般是B/S模式browser/server 3.微软 - SQL Server 4.IBM - DB2s 5.PostgreSQL redis - 键值对数据库 MongoDB - 文档数据库 ElasticSearch/Solr - 收缩引擎​ 中文编码 ASCII - 128 英语 GB2312 - 6000+ GBK - 20000+ GB18030 - 还收录了少数民族文字​ \u4e00 - \u9fa5 虚拟机 - 模拟器重量级 VMWare Virtual Box Partallel Desktop 轻量级 - 轻量级容器 Docker linux安装Docker1.安装Docker yum -y install docker -io 2.启动Docker systemctl start docker 3.下载MySQL官方镜像(安装盘) docker pull mysql:5.7 查看镜像 - dacker images 4.创建容器运行mysql docker run -d -p 3306:3306 –name mysql57 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 windows系统启动MySQL服务器 1.Win+R -&gt; 运行 2.services.msr -&gt; 服务 3.MySQL -&gt; 启动 net start mysql 通过客户端程序连接服务器 字符集显示 开始菜单 - MySQL - MySQL Client Program 图形化客户端 Navicat for MySQL - 猫 SQLyog - 海豚 Toad for MySQL - 蟾蜍 数据库结构化查询语言SQL: Structured Query Language - 结构化查询语言 - 不区分大小写 DDL: Data Definition Language - 数据定义语言 - create(创建) / drop(删除) / alter(修改) DML：Data Manipulation Language - 数据操作语言 - insert/delete/update(更新修改)/select DCL: Data Control Language - 数据控制语言 - grant(授权)/revoke(召回权限)/commit/rollback 做一个学生选课系统 如果存在名为school的数据库就删除1drop database if exists school; 创建数据库school,并设置默认字符集为utf81create database school default charset utf8; 切换到school数据库(切换上下文环境)1use school; 创建学生表，名为tb_student 定义学生表的列，按照公司的命名规范12345678910drop table if exists tb_student;create table tb_student(stuid int not null comment &apos;创建学号，int型 ，not null是非空约束 comment里面是注释&apos;,stuname varchar(31) not null comment &apos;varchar是可变字符串，var是字符串，()里面的是长度&apos;,sex enum(&apos;男&apos;, &apos;女&apos;) default &apos;男&apos; comment &apos;性别，双引号和单引号没有区别&apos;,stubirth date comment &apos;出生日期&apos;,stuaddr varchar(255) comment &apos;家庭住址，255其实占据256字符，有一个字符串结束字符&apos;,primary key(stuid)); 修改tb_student表的表结构，增加一个联系方式1alter table tb_student add column stutel char(11) comment &quot;添加手机号，增加一个列，固定字符11&quot;; 修改tb_student表的表结构，删除一个列1alter table tb_student drop column stutel; 修改tb_student表结构1alter table tb_student change column stuname stuname varchar(20) not null comment &quot;姓名&quot; 创建课程tb_course(cid, cname, credit, cdate)1drop table if exists tb_course; 创建tb_course12345678create table tb_course(cid int not null comment &apos;课程id&apos;,cname varchar(31) not null comment &apos;课程名称&apos;,credit tinyint unsigned not null comment &apos;课程学分&apos;,cdate timestamp default now() comment &apos;开课时间&apos;,primary key(cid)); 录入数据,往tb_student中添加学生123456insert into tb_student values(1001, &apos;骆昊&apos;, default, &apos;1980-11-28&apos;, &apos;四川成都&apos;);insert into tb_student (stuid, stuname, stubirth) values(1002, &apos;王大锤&apos;, &apos;1990-2-2&apos;);insert into tb_student (stuid, stuname, sex) values(1003, &apos;赵云&apos;, default),(1004, &apos;花木兰&apos;, &apos;女&apos;),(1005, &apos;瑞文&apos;, &apos;女&apos;); 录入数据，给tb_course中添加五个课程123456insert into tb_course (cid, cname, credit) values(101, &apos;微观经济学&apos;, 3),(102, &apos;宏观经济学&apos;, 3),(103, &apos;投资学&apos;, 3),(104, &apos;金融市场学&apos;, 3),(105, &apos;审计&apos;, 3); 删除记录 delete from tb_student； 删除全表 &lt;&gt;表示不相等 truncate table tb_student; 删除全表123delete from tb_student where stuid=1002;delete from tb_student where stuid&lt;1004;delete from tb_student where stuid between 1001 and 1005; 更新记录12345678update tb_student set stubirth=&apos;2000-2-2&apos; where stuid=&apos;1004&apos;;update tb_student set stuaddr=&apos;召唤师峡谷&apos; where stuid=&apos;1004&apos;;update tb_student set stubirth=&apos;2000-1-1&apos; where stuid=&apos;1005&apos;;update tb_course set credit=5 where cid=103;update tb_course set credit=8 where cid in (&apos;102&apos;, &apos;104&apos;);update tb_course set credit=20 where cid=101 or cid=105; 查询记录12select * from tb_student where stuid=&apos;1001&apos;;select * from tb_student where stuid in (1001, 1002, 1003); 投影1select stuid, stuname, sex from tb_student; 投影 + 别名 as 可以省略12345select stuid as 学号, stuname as 姓名, sex as 性别 from tb_student;select stuid as 学号, stuname as 姓名, sex as 性别 from tb_student where sex=&apos;男&apos;;select stuname 姓名, stubirth 生日 from tb_student where stubirth&gt;&apos;2000-0-0&apos;; 查询家庭住址为空的学生的姓名和性别123select stuname 姓名, sex 性别, stubirth 生日 from tb_student where stuaddr is null;select stuname 姓名, sex 性别, stubirth 生日 from tb_student where stuaddr is not null; 集合运算 in not in短路运算 and or not 1234567insert into tb_student values (1006, &apos;楚花风&apos;, default, null, null);-- 模糊查询 like 查询姓花的人 %是通配符，可以是0或者多个select * from tb_student where stuname like &apos;花%&apos;;-- _表示精确匹配一个字符 __表示后面精确匹配两个字符select * from tb_student where stuname like &apos;花__&apos; or stuname like &apos;_文&apos;;select * from tb_student where stuname like &apos;%花%&apos;; 12345678910111213141516171819202122-- 查询后再排序 order by stuid 默认为 asc升序 desc为降序select * from tb_student order by stuid desc;-- 排序以姓名字符排select * from tb_student order by stuname asc;-- 排序第一关键字性别，第二关键字学号升序select * from tb_student order by sex, stuid asc;-- 以学号降序排序，查询前三条select * from tb_student order by stuid desc limit 3;-- 跳过三条记录查询三条记录 分页查询select * from tb_student order by stuid desc limit 3 offset 5;-- 和上相同，但是不足时都会保留三条，跳过2取4select * from tb_student order by stuid limit 2,4;insert into tb_student values (1007, &quot;Lee&quot;, default, &apos;1990-1-1&apos;, null);-- 从姓名的第一个字符取取一个字符select substr(stuname, 1, 1) from tb_student;-- 去重select distinct substr(stuname, 1, 1) from tb_student;select substr(stuname, 2, length(stuname)) from tb_student;select concat(stuname, &apos;000&apos;) from tb_student; 聚合函数 实现统计功能123456789101112-- 求最大的学分select max(credit) from tb_course;-- 求最小的学分select min(credit) from tb_course;-- 求学分总和select sum(credit) from tb_course;-- 求平均学分select avg(credit) from tb_course;-- 求有多少种学分 求有多少门课程select count(credit) from tb_course;-- 求有多少学生select count(stuid) from tb_student; 分组查询123select sex, count(stuid) from tb_student group by sex;-- where group by order by limit offsetselect credit, count(cid) from tb_course group by credit; 123456789101112131415161718drop user &apos;eryang&apos;@&apos;%&apos;drop user &apos;eryang&apos;@&apos;local&apos;-- 创建用户-- localhost表示只能本地登录，不能网络访问-- create user &apos;wangdachui&apos;@&apos;10.7.156.17&apos; 表示这个用户只能从这个Ip登录-- create user &apos;wangdachui&apos;@&apos;%&apos; 表示从哪里都可以登录create user &apos;eryang&apos;@&apos;local&apos; identified by &apos;123456&apos;create user &apos;eryang&apos;@&apos;%&apos; identified by &apos;123456&apos;-- 授权操作 grant to 末尾加上with grant option 还可以再次授权grant all privileges on *.* to &apos;eryang&apos;@&apos;%&apos;;revoke all privileges on school.* from &apos;eryang&apos;@&apos;%&apos;;grant select on school.* to &apos;eryang&apos;@&apos;%&apos;;grant insert on school.* to &apos;eryang&apos;@&apos;%&apos;;grant all privileges on school.* to &apos;eryang&apos;@&apos;%&apos;; 表与表之间的关系 一对一的关系 (人和身份证) 一对多的关系 (人和银行卡) 多对多的关系 (学生和课程、订单和商品之间) 外键：外来的主键，其他表中是主键，本表是外键 学生 课程 学院 老师]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F01%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
